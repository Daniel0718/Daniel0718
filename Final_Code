#include <LiquidCrystal_I2C.h>//匯入I2C相容LCD函式庫
#include <Keypad.h>//匯入薄膜式鍵盤函式庫
#include <Servo.h>//匯入伺服馬達函式庫
#define Password_Lenght 7 //定義預設密碼 與 長度 6+1 1:/0
LiquidCrystal_I2C lcd(0x27,16,2); //定義LCD
Servo myservo;//定義伺服馬達
int pos = 0; //宣告 伺服馬達角度
char Data[Password_Lenght]; // 定義資料陣列為預設密碼長度(7)
char Master[Password_Lenght] = "123456";
byte data_count = 0, master_count = 0; //定義 資料計數 與 預設密碼計數
char customKey;//定義 取得鍵盤輸入變數

const byte ROWS = 4; //定義 行
const byte COLS = 4;//定義 列
bool door = true; //定義馬達目前狀態
char hexaKeys [ROWS] [COLS] = {//宣告陣列 以對應鍵盤按鍵位置
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};//定義與連結"行"的資料輸入腳
byte colPins[COLS] = {5, 4, 3, 2};//定義與連結"列"的資料輸入腳
Keypad customKeypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); //定義取得鍵盤輸入
 
void setup()
{
  lcd.init();// 初始化LCD
  lcd.backlight();//LCD背景光初始
  myservo.attach(13);//定義馬達角度輸出接腳
  lcd.print(" Team 1 Project");//LCD顯示 " " 
  lcd.setCursor(0,1); //設定顯示行列
  lcd.print("--Lock Project--"); //LCD顯示 " " 
  delay(3000);//延遲
  lcd.clear();//LCD清除
  Serial.begin(9600); //Arduino 內部串列輸出序列埠
  Serial.print("Test OK"); // 內部串列輸出序列埠顯示 " " 
}
void loop()
{
  if (door == 0)//已解鎖後
  {
    customKey = customKeypad.getKey();
    if (customKey == '#')//鎖上

    {
      lcd.clear();
      ServoClose();
      lcd.print(" Door is close");
      delay(3000);
      door = 1;
    }
  }

  else Open();
}

void clearData()//清除密碼資料
{
  while (data_count != 0)
  { // This can be used for any array size,
    Data[data_count--] = 0; //clear array for new data
  }
  return;
}

void ServoOpen() //馬達打開
{
  for (pos = 100; pos >= 0; pos -= 5) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
}

void ServoClose()//馬達關閉
{
  for (pos = 0; pos <= 90; pos += 5) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
}

void Open() //主要儲存輸入與比對
{
  lcd.setCursor(0, 0);
  lcd.print(" Enter Password");
  
  customKey = customKeypad.getKey();
  if (customKey) // 輸入儲存至陣列與顯示
  {
    Data[data_count] = customKey; 
    lcd.setCursor(data_count, 1); 
    lcd.print(Data[data_count]); 
    data_count++; 
  }

  if (data_count == Password_Lenght - 1) // 若輸入密碼長度與設定一致 (成功與失敗)
  {
    if (!strcmp(Data, Master)) //  一字一字對比若都相同回傳0，故需補數
    {
      lcd.clear();
      ServoOpen();
      lcd.print(" Door is OPen");
      door = 0;
    }
    else //若設定密碼與輸入不相同 
    {
      lcd.clear();
      lcd.print(" Wrong Password");
      delay(1000);
      lcd.clear();
      door = 1;
    }
    clearData();
  }
}
